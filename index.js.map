{"mappings":"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","sources":["app/javascript/application.js","app/javascript/controllers/hello_controller.js"],"sourcesContent":["// Configure your import map in config/importmap.rb. Read more: https://github.com/rails/importmap-rails\n// @hotwired/stimulus をインポートしてアプリケーションを初期化します\nimport { Application } from \"@hotwired/stimulus\"\nimport HelloController from \"./controllers/hello_controller\";\n\nconst application = Application.start();\n\n// HelloController をアプリケーションに登録します\napplication.register(\"hello\", HelloController);\n\n// ドキュメントが完全に読み込まれた後に実行されるイベントリスナーを設定\ndocument.addEventListener('turbo:load', () => {\n  // タスクフォームを取得し、イベントリスナーを追加\n  const addTaskForm = document.getElementById('add-task-form');\n  if (addTaskForm) {\n    addTaskForm.addEventListener('submit', function(event) {\n      event.preventDefault();\n      const taskName = document.getElementById('task-name').value;\n      console.log(`タスクを追加: ${taskName}`);\n      addTaskForm.reset();\n    });\n  }\n\n  // すべての完了チェックボックスにイベントリスナーを追加\n  document.querySelectorAll('.task-complete-checkbox').forEach(checkbox => {\n    checkbox.addEventListener('change', function() {\n      const taskId = this.dataset.taskId;\n      const taskRow = document.querySelector(`tr[data-task-id=\"${taskId}\"]`); // タスク行を特定\n\n      console.log('タスクのチェックが変更されました:', taskId);\n      console.log(`タスク ${taskId} は ${this.checked ? '完了' : '未完了'} です。`);\n\n      fetch(`/tasks/${taskId}/toggle_completion`, {\n        method: 'PUT',\n        headers: {\n          'X-CSRF-Token': document.querySelector(\"[name='csrf-token']\").getAttribute('content'),\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ completed: this.checked })\n      })\n      .then(response => {\n        if (response.ok) {\n          console.log('完了トグルのレスポンスが成功しました');\n          if (this.checked) {\n            taskRow.classList.add('completed');\n            console.log(`タスク ${taskId} に 'completed' クラスが追加されました。`);\n          } else {\n            taskRow.classList.remove('completed');\n            console.log(`タスク ${taskId} から 'completed' クラスが削除されました。`);\n          }\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('タスクの完了状態がトグルされました:', data);\n      })\n      .catch(error => {\n        console.error('タスクの完了状態のトグルでエラーが発生しました:', error);\n      });\n    });\n  });\n\n  // すべての削除ボタンにイベントリスナーを追加\n  document.querySelectorAll('.delete-task-button').forEach(button => {\n    button.addEventListener('click', function() {\n      const taskId = this.dataset.taskId;\n      console.log(`タスク ${taskId} を削除します`);\n      // ここにタスク削除の追加処理が必要な場合は記述\n    });\n  });\n});","// Stimulusコントローラーのインポート、ローカルパスを指定\nimport { Controller } from \"@hotwired/stimulus\"\n\nexport default class extends Controller {\n  static targets = [\"complete\"];\n\n  // コントローラがページに接続されたときに実行\n  connect() {\n    this.element.textContent = \"こんにちは、TaskMaster2!\";\n    console.log(\"HelloControllerが接続されました。\");\n  }\n\n  // 完了状態のトグル機能\n  toggleComplete(event) {\n    event.preventDefault();\n    const taskId = this.element.dataset.id; // data-id属性からタスクIDを取得\n    console.log(`タスク ${taskId} の完了状態をトグルします。`);\n\n    // タスクの完了状態をAPI経由でサーバーに通知\n    fetch(`/tasks/${taskId}/toggle_completion`, {\n      method: 'PUT',\n      headers: {\n        'X-CSRF-Token': document.querySelector(\"[name='csrf-token']\").getAttribute('content'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ completed: this.completeTarget.classList.contains(\"is-complete\") })\n    })\n    .then(response => {\n      if (response.ok) {\n        console.log(`タスク ${taskId} の完了状態が更新されました。`);\n        this.completeTarget.classList.toggle(\"is-complete\"); // CSSクラスをトグル\n      } else {\n        console.error(`タスク ${taskId} の更新に失敗しました。`);\n      }\n    })\n    .catch(error => {\n      console.error('API呼び出し中にエラーが発生しました:', error);\n    });\n  }\n}\n"],"names":[],"version":3,"file":"index.js.map"}